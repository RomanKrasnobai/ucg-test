{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notifications$ = new BehaviorSubject([]);\n  }\n  emitNotification(type, message) {\n    this.notifications$.next([...this.notifications$.getValue(), {\n      type,\n      message\n    }]);\n  }\n  static #_ = this.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","NotificationService","constructor","notifications$","emitNotification","type","message","next","getValue","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/romankrasnobai/Documents/programming-pet-projects/ucg-test/src/app/services/notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {Notification} from \"../interfaces/notification.interface\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  notifications$: BehaviorSubject<Notification[]> = new BehaviorSubject<Notification[]>([]);\n\n  emitNotification(type: string, message: string) {\n    this.notifications$.next(\n      [...this.notifications$.getValue(),\n        {\n          type,\n        message\n    }]);\n  }\n}\n"],"mappings":"AACA,SAAQA,eAAe,QAAO,MAAM;;AAMpC,OAAM,MAAOC,mBAAmB;EAHhCC,YAAA;IAIE,KAAAC,cAAc,GAAoC,IAAIH,eAAe,CAAiB,EAAE,CAAC;;EAEzFI,gBAAgBA,CAACC,IAAY,EAAEC,OAAe;IAC5C,IAAI,CAACH,cAAc,CAACI,IAAI,CACtB,CAAC,GAAG,IAAI,CAACJ,cAAc,CAACK,QAAQ,EAAE,EAChC;MACEH,IAAI;MACNC;KACH,CAAC,CAAC;EACL;EAAC,QAAAG,CAAA,G;qBAVUR,mBAAmB;EAAA;EAAA,QAAAS,EAAA,G;WAAnBT,mBAAmB;IAAAU,OAAA,EAAnBV,mBAAmB,CAAAW,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}