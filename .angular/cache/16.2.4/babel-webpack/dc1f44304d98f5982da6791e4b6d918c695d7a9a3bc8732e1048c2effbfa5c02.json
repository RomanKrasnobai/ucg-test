{"ast":null,"code":"import { inject } from '@angular/core';\nimport { StorageService } from \"./storage.service\";\nimport { Constants } from \"../interfaces/constants\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { NotificationService } from \"./notification.service\";\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {\n    this.storageService = inject(StorageService);\n    this.notificationService = inject(NotificationService);\n    this.users$ = new BehaviorSubject(this.storageService.getItem(Constants.USERS_LIST_KEY));\n    this.selectedUser$ = new BehaviorSubject(null);\n  }\n  saveUser(user, selectedUser) {\n    if (!selectedUser) {\n      const searchedUser = this.users$.getValue().find(userItem => userItem.username.toLowerCase() === user.username.toLowerCase());\n      if (searchedUser?.username.toLowerCase() === user.username.toLowerCase()) {\n        this.notificationService.emitNotification(Constants.FAILED_NOTIFICATION_TYPE, 'The user is already exists!');\n        return;\n      }\n      if (user.password === user.repeatPassword) {\n        const updatedUsers = [...this.users$.getValue(), user];\n        this.users$.next(updatedUsers);\n        this.storageService.setItem(Constants.USERS_LIST_KEY, this.users$.getValue());\n        this.notificationService.emitNotification(Constants.SUCCESS_NOTIFICATION_TYPE, `New user ${user.username} was created!`);\n      } else {\n        this.notificationService.emitNotification(Constants.FAILED_NOTIFICATION_TYPE, 'Password doesn\\'t match!');\n      }\n    } else {\n      const updatedUsers = this.users$.getValue().map(userItem => {\n        if (userItem.username === selectedUser.username) {\n          return Object.assign(userItem, user);\n        }\n        return userItem;\n      });\n      this.users$.next(updatedUsers);\n      this.storageService.setItem(Constants.USERS_LIST_KEY, this.users$.getValue());\n      this.notificationService.emitNotification(Constants.SUCCESS_NOTIFICATION_TYPE, `User ${user.username} info was updated!`);\n    }\n  }\n  removeUser(user) {\n    const updatedUsers = this.users$.getValue().filter(userItem => userItem.username !== user.username);\n    this.users$.next(updatedUsers);\n    this.storageService.setItem(Constants.USERS_LIST_KEY, this.users$.getValue());\n    this.notificationService.emitNotification(Constants.SUCCESS_NOTIFICATION_TYPE, `User ${user.username} was deleted!`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","StorageService","Constants","BehaviorSubject","NotificationService","UserService","constructor","storageService","notificationService","users$","getItem","USERS_LIST_KEY","selectedUser$","saveUser","user","selectedUser","searchedUser","getValue","find","userItem","username","toLowerCase","emitNotification","FAILED_NOTIFICATION_TYPE","password","repeatPassword","updatedUsers","next","setItem","SUCCESS_NOTIFICATION_TYPE","map","Object","assign","removeUser","filter","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/romankrasnobai/Documents/programming-pet-projects/ucg-test/src/app/services/user.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {StorageService} from \"./storage.service\";\nimport {User} from \"../interfaces/user.interface\";\nimport {Constants} from \"../interfaces/constants\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {NotificationService} from \"./notification.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private storageService = inject(StorageService);\n  private notificationService = inject(NotificationService);\n\n  users$: BehaviorSubject<User[]> =\n    new BehaviorSubject<User[]>(this.storageService.getItem(Constants.USERS_LIST_KEY));\n\n  selectedUser$: BehaviorSubject<User | null> = new BehaviorSubject<User | null>(null);\n\n  saveUser(user: User, selectedUser: User | null): void {\n    if (!selectedUser) {\n      const searchedUser = this.users$.getValue().find((userItem: User) =>\n        userItem.username.toLowerCase() === user.username.toLowerCase());\n\n      if (searchedUser?.username.toLowerCase() === user.username.toLowerCase()) {\n        this.notificationService.emitNotification(\n          Constants.FAILED_NOTIFICATION_TYPE,\n          'The user is already exists!'\n        );\n        return;\n      }\n\n      if (user.password === user.repeatPassword) {\n        const updatedUsers: User[] = [...this.users$.getValue(), user];\n        this.users$.next(updatedUsers);\n\n        this.storageService.setItem(Constants.USERS_LIST_KEY, this.users$.getValue());\n\n        this.notificationService.emitNotification(\n          Constants.SUCCESS_NOTIFICATION_TYPE,\n          `New user ${user.username} was created!`\n        );\n      } else {\n        this.notificationService.emitNotification(\n          Constants.FAILED_NOTIFICATION_TYPE,\n          'Password doesn\\'t match!'\n        );\n      }\n    } else {\n      const updatedUsers: User[] = this.users$.getValue().map((userItem: User) => {\n        if (userItem.username === selectedUser.username) {\n          return Object.assign(userItem, user);\n        }\n        return userItem;\n      });\n      this.users$.next(updatedUsers);\n      this.storageService.setItem(Constants.USERS_LIST_KEY, this.users$.getValue());\n\n      this.notificationService.emitNotification(\n        Constants.SUCCESS_NOTIFICATION_TYPE,\n        `User ${user.username} info was updated!`\n      );\n    }\n  }\n\n  removeUser(user: User): void {\n    const updatedUsers: User[] = this.users$.getValue()\n      .filter((userItem: User) => userItem.username !== user.username);\n\n    this.users$.next(updatedUsers);\n    this.storageService.setItem(Constants.USERS_LIST_KEY, this.users$.getValue());\n\n    this.notificationService.emitNotification(\n      Constants.SUCCESS_NOTIFICATION_TYPE,\n      `User ${user.username} was deleted!`\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}